# Урок: ООП. Магические методы, утиная типизация, статические методы и методы класса.
# Задание Ultra Lite:
# 1. Реализовать собственный класс с использованием магических методов


# Выполнение задания Ultra Lite:
# Реализуем собственный класс Triangle, объектами которого будут геометрические фигуры Треугольники, с использованием магических методов.

class Triangle:
    '''
        Домументрирование класса.
        Класс Triangle - это геометрические плоские фигуры-треугольники, при создания экземпляра класса необходимо в качестве параметров указать
        длины все трех сторон треугольника (a, b, c).
        Если длины сторон при создании объекта указаны не верно, то выйдет ошибка.
        Для экземпляров класса Triangle определены поведения следующих функций:
        1) вывод на экран объекта функцией print,
        2) определение длины объекта функцией len (целая часть периметра треуголника с множителем 100 для масшатабирования точности)
        3) определение объекта к типу float (значение площади треугольника)
        4.1) сложение объектов между собой (результат сложения - новый треугольник с длинами сторон, равными сумме длин слогаемых объектов)
        4.2) сложение объекта с числом (результат сложения - новый треугольник с длинами сторон, равными сумме длин сторон объекта и числа)
        5) результат сравнения объектов на равенство (==)
        6) результат сравнения объектов на знак меньше (<)
        '''
    def __init__(self, a, b, c): # магический метод инициализация объекта
        self.side1 = a # длина первой стороны треуголника
        self.side2 = b # длина второй стороны треуголника
        self.side3 = c # длина третьей стороны треуголника
        if self.square() == 0 or isinstance(self.square(), complex) or (self.side1 <= 0 or self.side2 <= 0 or self.side3 <= 0): # проверка корректности заданных длин сторон треугольника
            raise Exception(f'Треугольника со сторонами {self.side1}, {self.side2}, {self.side3} не существует!')

    def __str__(self): # магический метод формата вывода на экран созданного объекта через функцию print
        return f'Это треугольник с длинами сторон {self.side1}, {self.side2}, {self.side3}'

    def __len__(self): # магический метод вычисления длины объекта (в данном классе длиной объекта-треугольник будет целая часть его периметра умноженная на масштабирующий коэффициент 100)
        return int(100*(self.side1 + self.side2 + self.side3))

    def __float__(self):
        return self.square()  # float определеяем как площадь объекта-фигуры

    def square(self): #метод класса (площадь треугольника по трем сторонам)
        p = (self.side1 + self.side2 + self.side3) / 2
        return (p * (p - self.side1) * (p - self.side2) * (p - self.side3)) ** 0.5

    def __add__(self, other): # магический метод сложения объектов (в данном классе под суммой объектов понимается новый объект-треугольник со стороными равными сумме сторон слогаемых треугольников или сторон треуголника с числом)
        if isinstance(other, Triangle):
            return Triangle(self.side1 + other.side1, self.side2 + other.side2, self.side3 + other.side3) # если складываем объект класса Triangle с объектом этоже клаccа
        if isinstance(other, (int, float)):
            return Triangle(self.side1 + other, self.side2 + other, self.side3 + other) # если складываем объект класса Triangle с числом класса int, float

    def __eq__(self, other):  # магический метод определения поведения оператора равенства ==
        try:
            other_list = [other.side1, other.side2, other.side3]
            other_list.remove(self.side1)
            other_list.remove(self.side2)
            other_list.remove(self.side3)
            return True
        except:
            return False

    def __lt__(self, other):  # магический метод определения поведения оператора сравнения <
        return self.square() < other.square()


if __name__ == '__main__':
    t1 = Triangle(1, 1.99, 1)  # создаем экземпляр класса №1
    t2 = Triangle(2, 1, 2)  # создаем экземпляр класса №2
    t3 = Triangle(1, 2, 2)  # создаем экземпляр класса №3
    t4 = Triangle(1, 0.5, 1)  # создаем экземпляр класса №4
    t5 = Triangle(0.1, 2, 2)  # создаем экземпляр класса №5
    t6 = Triangle(2, 3, 3)  # создаем экземпляр класса №6
    t7 = Triangle(3, 2, 3)  # создаем экземпляр класса №7
    print(f'Выводим объект #1: {t1}')
    print(f'Приводим объект #2 ({t2}) к типу float: {float(t2)}')
    print(f'Определяем длину объекта #3 ({t3}): {len(t3)}')
    print(f'Результат сложения объектов №4 и №5 ({t4} и {t5}):  \n{t4+t5}')
    print(f'Результат сравнения на равенство треугольников №6 и №7 ({t6} и {t7}):', t6 == t7)
    print(f'Треугольник №2 < Треугольника №7? -> {t2 < t7}')
